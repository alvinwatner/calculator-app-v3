{
  "package_name": "com.steve.scientific_calc",
  "project_description": "The scientific calculator app is a comprehensive Flutter project that follows the Stacked architecture. It provides a wide range of scientific calculation features, including basic arithmetic operations, trigonometric functions, and advanced expression evaluation. The app allows users to perform complex calculations, view results, and manage the calculator state through various UI components like the keypad, display, and dialog/bottom sheet interactions.",
  "architecture_overview": "The application's architecture is based on the Stacked pattern, which separates the app into distinct layers: app setup, features, UI components, and utilities. The app.dart file sets up the app structure, routes, services, and dependencies using Stacked annotations. The app.router.dart file manages the navigation and routing, while the app.locator.dart file handles the dependency injection. The app features, such as the home view and startup view, are implemented in separate folders and use ViewModels to handle the business logic and state management. The UI components, like the calculator display and keypad, are decoupled from the view models and provide a modular and reusable design. The utilities folder contains the calculator expression evaluator and other common functions.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for managing the dialog system in the Flutter application. It sets up and registers custom dialog builders, allowing the app to display various types of dialogs to the user.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This method initializes the dialog service and registers custom dialog builders for different dialog types.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services",
        "app.locator",
        "ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up and managing the bottom sheet UI in the application. It defines the available bottom sheet types and provides a setup function to configure the bottom sheet service with the appropriate builders.",
      "class_diagram": "@startuml\nclass BottomSheetService {\n  +setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nenum BottomSheetType {\n  notice\n}\n\nclass NoticeSheet {\n  +NoticeSheet(request: BottomSheetRequest, completer: Function(SheetResponse))\n}\n\nBottomSheetService o-- BottomSheetType\nBottomSheetService o-- NoticeSheet\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the bottom sheet UI by configuring the BottomSheetService with the available bottom sheet builders.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app.locator.dart",
        "ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/utils/calculator_functions.dart",
      "description": "This Dart file implements a simple expression evaluator that can handle basic arithmetic operations and scientific functions. The main purpose is to provide a utility for evaluating mathematical expressions entered by users, which is a common requirement in calculator or formula-based applications.",
      "class_diagram": "@startuml\nclass ExpressionEvaluator {\n  +evaluate(String expression): double\n  -_replaceScientificFunctions(String expression): String\n  -_evaluateExpression(String expression): double\n}\n@enduml",
      "methods": [
        {
          "name": "evaluate",
          "description": "Evaluates the given mathematical expression and returns the result as a double.",
          "parameters": [
            "expression"
          ],
          "return_type": "double"
        },
        {
          "name": "_replaceScientificFunctions",
          "description": "Replaces scientific functions (sin, cos, tan) in the expression with their evaluated results.",
          "parameters": [
            "expression"
          ],
          "return_type": "String"
        },
        {
          "name": "_evaluateExpression",
          "description": "Recursively evaluates the given expression by handling parentheses, exponents, and basic arithmetic operations.",
          "parameters": [
            "expression"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, creates the corresponding page widgets, and provides convenience methods for navigating between the different views.",
      "class_diagram": "@startuml\nclass StackedRouter {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension {\n  +Future<dynamic> navigateToHomeView()\n  +Future<dynamic> navigateToStartupView()\n  +Future<dynamic> replaceWithHomeView()\n  +Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "StackedRouter",
          "description": "Defines the available routes and creates the corresponding page widgets for the application.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:scientific_calc/features/home/home_view.dart",
        "package:scientific_calc/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up the dependency injection and service locator for the Flutter application. It is a generated file that is part of the Stacked architecture, which is a popular state management and application structure pattern for Flutter apps.",
      "class_diagram": "@startuml\nclass BottomSheetService\nclass DialogService\nclass NavigationService\n\nStackedLocator *-- BottomSheetService\nStackedLocator *-- DialogService\nStackedLocator *-- NavigationService\n@enduml",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the Stacked service locator. It allows these services to be easily accessed and injected throughout the application.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/utils/constants.dart",
      "description": "This file defines a set of constants related to a calculator application, including the lists of scientific operators, basic operators, numbers, and other special characters used in the calculator's user interface.",
      "class_diagram": "",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This file defines the `NoticeSheetModel` class, which is a view model responsible for managing the state and behavior of the notice bottom sheet UI component in the application.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +void showNotice()\n  +void hideNotice()\n  +String get noticeMessage\n  +bool get isVisible\n}\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet by updating the necessary state.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "hideNotice",
          "description": "Hides the notice bottom sheet by updating the necessary state.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "get noticeMessage",
          "description": "Returns the current notice message to be displayed in the bottom sheet.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "get isVisible",
          "description": "Returns a boolean indicating whether the notice bottom sheet is currently visible.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "The `ui_helpers.dart` file contains a set of utility functions and constants that help with the layout and styling of the Flutter UI. This file provides a centralized location for commonly used UI elements and responsive design helpers, promoting code reuse and consistency across the application.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + static const double _tinySize\n  + static const double _smallSize\n  + static const double _mediumSize\n  + static const double _largeSize\n  + static const double _massiveSize\n  \n  + static const Widget horizontalSpaceTiny\n  + static const Widget horizontalSpaceSmall\n  + static const Widget horizontalSpaceMedium\n  + static const Widget horizontalSpaceLarge\n  + static const Widget verticalSpaceTiny\n  + static const Widget verticalSpaceSmall\n  + static const Widget verticalSpaceMedium\n  + static const Widget verticalSpaceLarge\n  + static const Widget verticalSpaceMassive\n  + static Widget spacedDivider\n  + static Widget verticalSpace(double height)\n  + static double screenWidth(BuildContext context)\n  + static double screenHeight(BuildContext context)\n  + static double screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + static double screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + static double halfScreenWidth(BuildContext context)\n  + static double thirdScreenWidth(BuildContext context)\n  + static double quarterScreenWidth(BuildContext context)\n  + static double getResponsiveHorizontalSpaceMedium(BuildContext context)\n  + static double getResponsiveSmallFontSize(BuildContext context)\n  + static double getResponsiveMediumFontSize(BuildContext context)\n  + static double getResponsiveLargeFontSize(BuildContext context)\n  + static double getResponsiveExtraLargeFontSize(BuildContext context)\n  + static double getResponsiveMassiveFontSize(BuildContext context)\n  + static double getResponsiveFontSize(BuildContext context, {double? fontSize, double? max})\n}\n@enduml",
      "methods": [
        {
          "name": "screenWidth",
          "description": "Returns the width of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "Returns the height of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Returns a fraction of the current screen height, with optional offset and maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "screenWidthFraction",
          "description": "Returns a fraction of the current screen width, with optional offset and maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth",
          "description": "Returns half the width of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "thirdScreenWidth",
          "description": "Returns one-third the width of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "quarterScreenWidth",
          "description": "Returns one-quarter the width of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Returns a responsive horizontal spacing value based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Returns a responsive small font size based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMediumFontSize",
          "description": "Returns a responsive medium font size based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveLargeFontSize",
          "description": "Returns a responsive large font size based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveExtraLargeFontSize",
          "description": "Returns a responsive extra-large font size based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMassiveFontSize",
          "description": "Returns a responsive massive font size based on the current screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Returns a responsive font size based on the current screen width, with optional maximum value.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog within a Flutter application's user interface.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n  +void showInfoAlert()\n  +void closeInfoAlert()\n}\n@enduml",
      "methods": [
        {
          "name": "showInfoAlert",
          "description": "Displays the information alert dialog to the user.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "closeInfoAlert",
          "description": "Dismisses the information alert dialog.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/calculator_display.dart",
      "description": "The `CalculatorDisplay` class is responsible for rendering the calculator's expression and result, as well as any error messages, in a visually appealing and informative way. This component is a key part of the calculator's user interface, providing the user with clear feedback on their calculations.",
      "class_diagram": "@startuml\nclass CalculatorDisplay extends StatelessWidget {\n  +String expression\n  +String result\n  +String error\n  +build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the visual representation of the calculator display, including the expression, result, and any error messages.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class represents a bottom sheet UI component that displays a notice or alert to the user. It is responsible for rendering the notice content, including the title and description, and providing a means to dismiss the bottom sheet.",
      "class_diagram": "@startuml\nclass NoticeSheet {\n  -Function(SheetResponse)? completer\n  -SheetRequest request\n  +Widget builder(BuildContext, NoticeSheetModel, Widget?)\n  +NoticeSheetModel viewModelBuilder(BuildContext)\n}\n\nclass NoticeSheetModel {\n}\n\nNoticeSheet *-- NoticeSheetModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The `builder` method is responsible for rendering the UI of the `NoticeSheet` bottom sheet. It takes in the `BuildContext`, `NoticeSheetModel`, and an optional `Widget` and returns the final `Widget` to be displayed.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `NoticeSheetModel`, which is used to manage the state and logic of the `NoticeSheet` component.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "scientific_calc/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "scientific_calc/ui/common/app_colors.dart",
        "scientific_calc/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/scientific_keypad.dart",
      "description": "The ScientificKeypad widget is responsible for rendering a custom calculator-style keypad with scientific functions and operations. It provides a user interface for inputting mathematical expressions and performing calculations. The widget is designed to be used within the home feature of the application, likely as part of a larger calculator or scientific computing tool.",
      "class_diagram": "@startuml\nclass ScientificKeypad {\n  -Function(String) onKeyPressed\n  -VoidCallback onClear\n  -VoidCallback onDelete\n  -VoidCallback onCalculate\n  +build(context): Widget\n  -_buildButton(text, {color, onPressed}): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the ScientificKeypad widget, which includes a grid of buttons representing various mathematical functions and operations.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildButton",
          "description": "Builds a single button with the given text, color, and optional onPressed callback.",
          "parameters": [
            "text",
            "color",
            "onPressed"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "../../ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "The `InfoAlertDialog` class is responsible for displaying an information alert dialog in the application. This dialog is used to convey important information to the user, such as details about a specific feature or tool within the app.",
      "class_diagram": "@startuml\nclass InfoAlertDialog extends StackedView<InfoAlertDialogModel> {\n  - DialogRequest request\n  - Function(DialogResponse) completer\n  + builder(BuildContext, InfoAlertDialogModel, Widget?)\n  + viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "This method is responsible for building the UI of the information alert dialog. It takes the `DialogRequest` object, which contains the title and description of the alert, and renders the dialog with a centered graphic and a 'Got it' button to dismiss the dialog.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "This method creates an instance of the `InfoAlertDialogModel`, which is the view model for this dialog. The view model is responsible for managing any state or logic required by the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:scientific_calc/ui/common/app_colors.dart",
        "package:scientific_calc/ui/common/ui_helpers.dart",
        "package:scientific_calc/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/services/calculator_service.dart",
      "description": "The CalculatorService class provides the core functionality for a calculator application. It manages the calculator's expression, result, and error state, and exposes methods to perform basic calculator operations such as appending values to the expression, clearing the expression, deleting the last character, and calculating the result.",
      "class_diagram": "@startuml\nclass CalculatorService {\n  - _expression: String\n  - _result: String\n  - _error: String\n  + get expression(): String\n  + get result(): String\n  + get error(): String\n  + appendToExpression(value: String): void\n  + clearAll(): void\n  + deleteLast(): void\n  + calculate(): void\n  - formatResult(result: double): String\n}\n@enduml",
      "methods": [
        {
          "name": "appendToExpression",
          "description": "Appends the given value to the current expression, clears any existing error, and notifies listeners of the state change.",
          "parameters": [
            "value: String"
          ],
          "return_type": "void"
        },
        {
          "name": "clearAll",
          "description": "Clears the expression, result, and error, and notifies listeners of the state change.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "deleteLast",
          "description": "Removes the last character from the expression and notifies listeners of the state change.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "calculate",
          "description": "Evaluates the current expression, formats the result, and updates the result and error state. Notifies listeners of the state change.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "formatResult",
          "description": "Formats the given result as a string, removing unnecessary trailing zeros and decimal points.",
          "parameters": [
            "result: double"
          ],
          "return_type": "String"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:stacked/stacked.dart",
        "../utils/calculator_functions.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "This file defines the AppViewModel class, which is the ViewModel component in the MVVM (Model-View-ViewModel) architecture used in the application. The AppViewModel is responsible for managing the application's state and providing the necessary data and functionality to the UI (View) layer.",
      "class_diagram": "@startuml\nclass AppViewModel {\n  +void initialize()\n  +void dispose()\n}\n\nclass BaseViewModel {\n  +void notifyListeners()\n  +bool isBusy\n}\n\nAppViewModel -up-|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the AppViewModel and performs any necessary setup.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "dispose",
          "description": "Performs cleanup and disposes of any resources used by the AppViewModel.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant colors used throughout the application's user interface. It provides a centralized location to manage and access the application's color palette, promoting consistency and maintainability.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/number_formatter.dart",
      "description": "The NumberFormatter class is responsible for formatting numeric values in a consistent and user-friendly way. It provides a central point for handling number formatting across the application, ensuring a uniform presentation of numeric data.",
      "class_diagram": "@startuml\nclass NumberFormatter {\n  + static format(double value, {int maxDecimalPlaces = 10}): String\n  - static _formatScientific(double value, int maxDecimalPlaces): String\n}\n@enduml",
      "methods": [
        {
          "name": "format",
          "description": "Formats a double value with a specified maximum number of decimal places. It automatically switches to scientific notation if the value is too large or too small.",
          "parameters": [
            "value",
            "maxDecimalPlaces"
          ],
          "return_type": "String"
        },
        {
          "name": "_formatScientific",
          "description": "Formats a double value in scientific notation with a specified maximum number of decimal places for the mantissa.",
          "parameters": [
            "value",
            "maxDecimalPlaces"
          ],
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/models/calculator_error.dart",
      "description": "This Dart file defines the `CalculatorError` class, which represents errors that can occur during the execution of a calculator application. It provides a standardized way to handle and report errors in the calculator's functionality.",
      "class_diagram": "@startuml\nclass CalculatorError {\n  -ErrorCode code\n  -String message\n  +String toString()\n}\n\nenum ErrorCode {\n  invalidExpression\n  divisionByZero\n  overflow\n  underflow\n  invalidOperation\n  syntaxError\n}\n@enduml",
      "methods": [
        {
          "name": "CalculatorError",
          "description": "Constructor for the CalculatorError class, which takes the error code and error message as required parameters.",
          "parameters": [
            "code",
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Overrides the default toString() method to return the error message.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/models/calculation_result.dart",
      "description": "The CalculationResult class represents the result of a calculation, which can be either a value or an error. It encapsulates the calculated value, any error that occurred, the formatted value, and whether the value is in scientific notation. This class is responsible for managing the state and data flow of calculation results in the application.",
      "class_diagram": "@startuml\nclass CalculationResult {\n  + final double? value\n  + final CalculatorError? error\n  + final String formattedValue\n  + final bool isScientificNotation\n  + bool get hasError\n  + bool get hasValue\n  + factory CalculationResult.error(CalculatorError error)\n  + factory CalculationResult.value(double value, String formattedValue, {bool isScientificNotation = false})\n}\n",
      "methods": [
        {
          "name": "CalculationResult",
          "description": "Constructor for the CalculationResult class. Initializes the class with the provided values.",
          "parameters": [
            "this.value",
            "this.error",
            "required this.formattedValue",
            "this.isScientificNotation = false"
          ],
          "return_type": null
        },
        {
          "name": "hasError",
          "description": "Getter that returns true if the CalculationResult has an error, false otherwise.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "hasValue",
          "description": "Getter that returns true if the CalculationResult has a value, false otherwise.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "CalculationResult.error",
          "description": "Factory constructor that creates a CalculationResult with an error.",
          "parameters": [
            "CalculatorError error"
          ],
          "return_type": "CalculationResult"
        },
        {
          "name": "CalculationResult.value",
          "description": "Factory constructor that creates a CalculationResult with a value.",
          "parameters": [
            "double value",
            "String formattedValue",
            "{bool isScientificNotation = false}"
          ],
          "return_type": "CalculationResult"
        }
      ],
      "dependencies": [
        "calculator_error.dart"
      ]
    },
    {
      "name": "lib/utils/validation_utils.dart",
      "description": "The ValidationUtils class is responsible for validating user input in a calculator application. It provides methods to check the validity of mathematical expressions, as well as the validity of numerical values. This class helps ensure the integrity and stability of the calculator's core functionality by catching and reporting potential issues with the user's input.",
      "class_diagram": "@startuml\nclass ValidationUtils {\n  + static bool isValidExpression(String expression)\n  + static bool _isOperator(String char)\n  + static CalculatorError? validateNumber(double number)\n  + static bool isCompleteExpression(String expression)\n}\n\nclass CalculatorError {\n  + int code\n  + String message\n}\n\nclass CalculatorConstants {\n  + static List<String> basicOperators\n  + static List<String> scientificOperators\n}\n@enduml",
      "methods": [
        {
          "name": "isValidExpression",
          "description": "Checks if the given expression is valid by verifying the balance of parentheses, the sequence of operators, and the expression's ending.",
          "parameters": [
            "String expression"
          ],
          "return_type": "bool"
        },
        {
          "name": "_isOperator",
          "description": "Helper method to check if a given character is a valid basic operator.",
          "parameters": [
            "String char"
          ],
          "return_type": "bool"
        },
        {
          "name": "validateNumber",
          "description": "Validates a given numeric value to ensure it is within the expected range and does not represent an invalid operation (e.g., overflow, underflow, or NaN).",
          "parameters": [
            "double number"
          ],
          "return_type": "CalculatorError?"
        },
        {
          "name": "isCompleteExpression",
          "description": "Checks if the given expression is a complete and valid mathematical expression, including handling of incomplete scientific functions.",
          "parameters": [
            "String expression"
          ],
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "../models/calculator_error.dart",
        "../utils/constants.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/error_display.dart",
      "description": "The `ErrorDisplay` widget is responsible for rendering an error message to the user in a visually appealing and informative way. It is designed to be used within the home feature of the application.",
      "class_diagram": "@startuml\nclass ErrorDisplay {\n  +String error\n  +VoidCallback onDismiss\n  +build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Renders the error message UI, including an error icon, the error text, and a close button to dismiss the error.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "lib/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/button_feedback.dart",
      "description": "The `ButtonFeedback` class is responsible for providing a customizable button with a visual feedback effect when pressed. It enhances the user experience by providing a subtle animation that gives the impression of the button being 'pressed down' and then released.",
      "class_diagram": "@startuml\n  class ButtonFeedback {\n    -late AnimationController _controller\n    -late Animation<double> _scaleAnimation\n    +final Widget child\n    +final VoidCallback onPressed\n    +final Color? feedbackColor\n    +State<ButtonFeedback> createState()\n    -Future<void> _handleTap()\n  }\n  @enduml",
      "methods": [
        {
          "name": "createState",
          "description": "Creates the state object for this widget.",
          "parameters": null,
          "return_type": "State<ButtonFeedback>"
        },
        {
          "name": "_handleTap",
          "description": "Handles the tap gesture on the button, triggering the animation and calling the provided onPressed callback.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant CalculatorService\nparticipant DialogService\nparticipant BottomSheetService\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> CalculatorService: Initialize service\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact with calculator\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> CalculatorService: Perform calculations\nHomeViewModel -> DialogService: Show information alert dialog\nHomeViewModel -> BottomSheetService: Show notice bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management, which separates the business logic and state from the UI. Each feature, such as the home view, has a corresponding ViewModel that manages the state and provides the necessary data and functionality to the UI. The ViewModels use reactive programming principles to notify the UI of state changes, allowing the views to update accordingly. The CalculatorService is a core service that handles the calculator's expression, result, and error state, and notifies the ViewModels of changes. The DialogService and BottomSheetService are used to manage the state and behavior of the custom dialogs and bottom sheets in the app.",
  "navigation_flow": "The application's navigation is handled by the Stacked Router, which is defined in the app.router.dart file. The router defines the available routes, such as the HomeView and StartupView, and provides convenience methods for navigating between them. When the app is launched, the main.dart file sets up the app and initializes the AppView, which then shows the StartupView. After the startup logic is completed, the StartupViewModel navigates to the HomeView. Within the HomeView, users can interact with the calculator and trigger the display of custom dialogs and bottom sheets, which are managed by the respective ViewModels and services."
}